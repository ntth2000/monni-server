package com.monniserver.service;

import com.monniserver.dto.SpendingItem;
import com.monniserver.entity.Spending;
import org.springframework.stereotype.Service;

import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.Comparator;
import java.util.List;

@Service
public class AnswerService {
    public String generateSpendingSummary(
            List<Spending> spendings,
            LocalDate startDate,
            LocalDate endDate,
            String category,
            String description
    ) {
        double totalAmount = spendings.stream().mapToDouble(Spending::getAmount).sum();

        int count = spendings.size();

        String startDateFormatted = startDate.format(DateTimeFormatter.ofPattern("dd/MM"));
        String endDateFormatted = endDate.format(DateTimeFormatter.ofPattern("dd/MM"));

        StringBuilder message = new StringBuilder();

        if (startDateFormatted.equals(endDateFormatted)) {
            message.append("<p>T·ªïng chi ti√™u c·ªßa b·∫°n trong ng√†y <strong>").append(startDateFormatted).append("</strong> l√† <strong>");
        } else {
            message.append("T·ªïng chi ti√™u c·ªßa b·∫°n t·ª´ <strong>")
                    .append(startDateFormatted).append("</strong> ƒë·∫øn <strong>").append(endDateFormatted)
                    .append("</strong> l√† <strong>");
        }

        message.append(this._formatAmount(totalAmount)).append("</strong>");

        if (category != null) {
            message.append(" cho m·ª•c ").append(category);
        }
        if (description != null) {
            message.append(" (").append(description).append(")");
        }

        message.append(", g·ªìm <strong>").append(count).append(" giao d·ªãch</strong>.</p>");

        return message.toString();
    }

    public String generateDetailSpendings(List<Spending> spendings) {
        if (spendings == null || spendings.isEmpty()) {
            return "";
        }

        List<Spending> sortedSpendings = spendings.stream()
                .sorted(Comparator.comparing(Spending::getDate))
                .toList();

        StringBuilder sb = new StringBuilder();
        sb.append("<p>D∆∞·ªõi ƒë√¢y l√† c√°c kho·∫£n chi ti√™u chi ti·∫øt:</p>");
        sb.append("<table>");
        sb.append("<thead><tr>")
                .append("<th>Giao d·ªãch</th>")
                .append("<th>Danh m·ª•c</th>")
                .append("<th>Ng√†y</th>")
                .append("<th>S·ªë ti·ªÅn</th>")
                .append("</tr></thead>");
        sb.append("<tbody>");

        for (Spending item : sortedSpendings) {
            sb.append("<tr>")
                    .append("<td>").append(item.getDescription()).append("</td>")
                    .append("<td>").append(item.getCategory()).append("</td>")
                    .append("<td>").append(this._formatDate(item.getDate())).append("</td>")
                    .append("<td><strong>").append(this._formatAmount(item.getAmount())).append("</strong></td>")
                    .append("</tr>");
        }

        sb.append("</tbody></table>");
        return sb.toString();
    }


    public String buildAddSpendingAnswer(List<SpendingItem> items) {
        if (items == null || items.isEmpty()) return "";

        List<SpendingItem> sortedItems = items.stream()
                .sorted(Comparator.comparing(SpendingItem::getDate))
                .toList();

        StringBuilder sb = new StringBuilder();
        sb.append("T·ªõ ƒë√£ l∆∞u c√°c kho·∫£n chi ti√™u sau r·ªìi nha:\n");
        sb.append("<div><table>");
        sb.append("<thead><tr>")
                .append("<th>Giao d·ªãch</th>")
                .append("<th>Danh m·ª•c</th>")
                .append("<th>Ng√†y</th>")
                .append("<th>S·ªë ti·ªÅn</th>")
                .append("</tr></thead>");
        sb.append("<tbody>");

        for (SpendingItem item : sortedItems) {
            sb.append("<tr>")
                    .append("<td>").append(item.getDescription()).append("</td>")
                    .append("<td>").append(item.getCategory()).append("</td>")
                    .append("<td>").append(this._formatDate(item.getDate())).append("</td>")
                    .append("<td>").append(this._formatAmount(item.getAmount())).append("</td>")
                    .append("</tr>");
        }

        sb.append("</tbody></table></div>");
        return sb.toString();
    }

    public String buildUpdateSpendingAnswer(List<Spending> successfulUpdates, List<SpendingItem> notFoundSpendings) {
        StringBuilder sb = new StringBuilder();

        if (!successfulUpdates.isEmpty()) {
            if (successfulUpdates.size() == 1) {
                Spending spending = successfulUpdates.getFirst();
                sb.append("ƒê√£ s·ª≠a l·∫°i chi ti√™u ")
                        .append(spending.getDescription())
                        .append(" th√†nh ").append(this._formatAmount(spending.getAmount())).append(" ng√†y")
                        .append(this._formatDate(spending.getDate()))
                        .append("cho m·ª•c ").append(spending.getCategory()).append(" r·ªìi nha!");
            } else {
                sb.append("<p>T·ªõ ƒë√£ c·∫≠p nh·∫≠t c√°c chi ti√™u sau r·ªìi nha:</p>");
                sb.append("<div><table>");
                sb.append("<thead><tr>")
                        .append("<th>Giao d·ªãch</th>")
                        .append("<th>Danh m·ª•c</th>")
                        .append("<th>Ng√†y</th>")
                        .append("<th>S·ªë ti·ªÅn</th>")
                        .append("</tr></thead>");
                sb.append("<tbody>");

                for (Spending item : successfulUpdates) {
                    sb.append("<tr>")
                            .append("<td>").append(item.getDescription()).append("</td>")
                            .append("<td>").append(item.getCategory()).append("</td>")
                            .append("<td>").append(item.getDate()).append("</td>")
                            .append("<td>").append(this._formatAmount(item.getAmount())).append("</td>")
                            .append("</tr>");
                }

                sb.append("</tbody></table></div>");
            }
        }

        if (!notFoundSpendings.isEmpty()) {
            sb.append("<p>B·∫°n h√£y cho t·ªõ th√™m th√¥ng tin v·ªÅ c√°c kho·∫£n c√≤n l·∫°i ƒë·∫ø t·ªõ c·∫≠p nh·∫≠t nh√©. T·ªõ ch∆∞a th·ªÉ c·∫≠p nh·∫≠t do thi·∫øu th√¥ng tin üòä</p>");
        }

        return sb.toString();
    }

    public String buildDeleteSpendingAnswer(List<Spending> successfulDeletions, List<SpendingItem> notFoundSpendings) {
        StringBuilder sb = new StringBuilder();

        if (!successfulDeletions.isEmpty()) {
            if (successfulDeletions.size() == 1) {
                Spending spending = successfulDeletions.getFirst();
                sb.append("T·ªõ ƒë√£ xo√° <strong>mua ")
                        .append(spending.getDescription())
                        .append(this._formatAmount(spending.getAmount())).append("</strong> ng√†y <strong>")
                        .append(this._formatDate(spending.getDate()))
                        .append("</strong> cho m·ª•c <strong>").append(spending.getCategory()).append("</strong> r·ªìi nha!");
            } else {
                sb.append("<p>T·ªõ ƒë√£ xo√° c√°c chi ti√™u sau r·ªìi nha:</p>");
                sb.append("<div><table>");
                sb.append("<thead><tr>")
                        .append("<th>Giao d·ªãch</th>")
                        .append("<th>Danh m·ª•c</th>")
                        .append("<th>Ng√†y</th>")
                        .append("<th>S·ªë ti·ªÅn</th>")
                        .append("</tr></thead>");
                sb.append("<tbody>");

                for (Spending item : successfulDeletions) {
                    sb.append("<tr>")
                            .append("<td>").append(item.getDescription()).append("</td>")
                            .append("<td>").append(item.getCategory()).append("</td>")
                            .append("<td>").append(this._formatDate(item.getDate())).append("</td>")
                            .append("<td>").append(this._formatAmount(item.getAmount())).append("</td>")
                            .append("</tr>");
                }

                sb.append("</tbody></table></div>");
            }
        }

        if (!notFoundSpendings.isEmpty()) {
            sb.append("<p>B·∫°n h√£y cho t·ªõ th√™m th√¥ng tin v·ªÅ c√°c kho·∫£n c√≤n l·∫°i ƒë·∫ø t·ªõ xo√° nh√©. T·ªõ ch∆∞a th·ªÉ xo√° do thi·∫øu ho·∫∑c sai th√¥ng tin üòä</p>");
        }

        return sb.toString();
    }


    private String _formatAmount(Double amount) {
        if (amount == null) return "0";
        return String.format("%,.0f", amount).replace(",", ".") + "‚Ç´";
    }

    private String _formatDate(LocalDate date) {
        return date.format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
    }
}
